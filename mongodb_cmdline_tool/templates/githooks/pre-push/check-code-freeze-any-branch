#!/bin/bash
#
# Like check-code-freeze, but checks all branches for code freeze.
#
# This is a useful workflow sometimes, for example in sys-perf project
# it is often necessary to push the same patch to all branches at once.
# If any one of them is frozen, you'll be prevented from pushing to all
# branches, also the non-frozen ones.
#
# You can use both checks for code freeze together! This one has a different
# variable to override (PUSH_THIS_BRANCH=yes), so you can choose to push to
# non-frozen branches but still be protected from pushing to a frozen branch.

# Find out which branch we're pushing to
read local_ref local_sha remote_ref remote_sha
branch=$(git name-rev --name-only $remote_ref)

# Get the code freeze status
url="https://s3.amazonaws.com/codefreeze/codefreeze.json"
# 3.0 and 2.6 are EOL, but still in the output, perpetually frozen. We want to ignore those.
freeze="`curl -fs $url | grep -v v3.0 | grep -v v2.6`"
if [ $? -ne 0 ]; then
    echo "I have no idea, sorry!"
    exit 1
fi



# Is any branch frozen?
frozen="`echo "$freeze" | grep "Yes" | cut -d: -f1 | tr -d ' "' | tr '\n' ' '`"
# Is this branch frozen?
this_branch="`echo "$freeze" | grep "$branch" | grep "Yes" | cut -d: -f1`"

if [ -n "$frozen" ]; then
    if [[ "$PUSH_THIS_BRANCH" == "yes" || "$PUSH_ANYWAY" == "yes" ]]; then
            echo "WARNING: pushing onto ${branch} despite code freeze on ${frozen}..."
        exit 0
    else
        echo
        echo "WARNING: branch(es) ${frozen} is in code freeze."
        if [ -n "$this_branch" ]; then
            echo "This branch is not frozen. If you only want to push to this branch:"
            echo
            echo "Run:"
            echo "  PUSH_THIS_BRANCH=yes git push"
            echo
        fi
        exit 1
    fi
fi
